def prepare_fasttext_data(input_file, output_file):
    with open(input_file, 'r') as f, open(output_file, 'w') as out_f:
        for line in f:
            tokens = line.strip().split()
            words_tags = [token.rsplit('_', 1) for token in tokens]

            for i, (word, tag) in enumerate(words_tags):
                prev_word = words_tags[i - 1][0] if i > 0 else "<<<"
                next_word = words_tags[i + 1][0] if i < len(words_tags) - 1 else ">>>"


                formatted_line = f"__label__{tag} word:{word} prev:{prev_word} next:{next_word}\n"
                out_f.write(formatted_line)


prepare_fasttext_data('pos_train.txt', 'pos_train.ft')
!pip install fasttext
import fasttext

model = fasttext.train_supervised('pos_train.ft', lr=0.1, epoch=10)  

model.save_model('pos_tagger_model.bin')
prepare_fasttext_data('pos_dev.txt', 'pos_dev.ft')

accuracy = model.test('pos_dev.ft')
print(f"Accuracy on dev set: {accuracy[1]}")
def tag_test_file(test_file, model, output_file):
    with open(test_file, 'r') as f, open(output_file, 'w') as out_f:
        for line in f:
            tokens = line.strip().split()
            words_tags = []

            for i, word in enumerate(tokens):
                prev_word = tokens[i - 1] if i > 0 else "<<<"
                next_word = tokens[i + 1] if i < len(tokens) - 1 else ">>>"


                input_text = f"word:{word} prev:{prev_word} next:{next_word}"


                predicted_tag = model.predict(input_text)[0][0].replace("__label__", "")
                words_tags.append(f"{word}_{predicted_tag}")


            out_f.write(" ".join(words_tags) + "\n")


tag_test_file('pos_test.txt', model, 'LIN127-HW3.tagged')
